http://binaryjs.com/
http://peerjs.com/team

peer.connectionsOBJECT
A hash of all connections associated with this peer, keyed by the remote peer's ID.
We recommend keeping track of connections yourself rather than relying on this hash.
peer.disconnectedBOOLEAN
false if there is an active connection to the PeerServer.
peer.destroyedBOOLEAN
true if this peer and all of its connections can no longer be used.
DataConnectionCLASS
Wraps WebRTC's DataChannel. To get one, use peer.connect or listen for the connect event.
.sendMETHODdataConnection.send(data);
data is serialized by BinaryPack by default and sent to the remote peer.
data
You can send any type of data, including objects, strings, and blobs.
.closeMETHODdataConnection.close();
Closes the data connection gracefully, cleaning up underlying DataChannels and PeerConnections.
.onMETHODdataConnection.on(event, callback);
Set listeners for data connection events.
'data'EVENTdataConnection.on('data', function(data) { ... });
Emitted when data is received from the remote peer.
'open'EVENTdataConnection.on('open', function() { ... });
Emitted when the connection is established and ready-to-use.
'close'EVENTdataConnection.on('close', function() { ... });
Emitted when either you or the remote peer closes the data connection.
Firefox does not yet support this event.
'error'EVENTdataConnection.on('error', function(err) { ... });
.bufferSizeNUMBER
The number of messages queued to be sent once the browser buffer is no longer full.
.dataChannelOBJECT
A reference to the RTCDataChannel object associated with the connection.
.labelSTRING
The optional label passed in or assigned by PeerJS when the connection was initiated.
.metadata
Any type of metadata associated with the connection, passed in by whoever initiated the connection.
.openBOOLEAN
This is true if the connection is open and ready for read/write.
.peerConnectionOBJECT
A reference to the RTCPeerConnection object associated with the connection.
.peerSTRING
The ID of the peer on the other end of this connection.
.reliableBOOLEAN
Whether the underlying data channels are reliable; defined when the connection was initiated.
.serializationSTRING
The serialization format of the data sent over the connection. Can be binary (default), binary-utf8, json, or none.
.typeSTRING
For data connections, this is always 'data'.
.bufferSizeNUMBER
The number of messages queued to be sent once the browser buffer is no longer full.
MediaConnectionCLASSBETA (0.3.0)
Wraps WebRTC's media streams. To get one, use peer.call or listen for the call event.
.answerMETHODmediaConnection.answer([stream]);
When recieving a call event on a peer, you can call .answer on the media connection provided by the callback to accept the call and optionally send your own media stream.
[stream]MEDIASTREAM
A WebRTC media stream from getUserMedia.
.closeMETHODmediaConnection.close();
Closes the media connection.
.onMETHODmediaConnection.on(event, callback);
Set listeners for media connection events.
'stream'EVENTmediaConnection.on('stream', function(stream) { ... });
Emitted when a remote peer adds a stream.
'close'EVENTmediaConnection.on('close', function() { ... });
Emitted when either you or the remote peer closes the media connection.
Firefox does not yet support this event.
'error'EVENTmediaConnection.on('error', function(err) { ... });
.openBOOLEAN
Whether the media connection is active (e.g. your call has been answered). You can check this if you want to set a maximum wait time for a one-sided call.
.metadata
Any type of metadata associated with the connection, passed in by whoever initiated the connection.
.peerSTRING
The ID of the peer on the other end of this connection.
.typeSTRING
For media connections, this is always 'media'.
utilOBJECTUTILITY
Provides a variety of helpful utilities.
Only the utilities documented here are guaranteed to be present on util. Undocumented utilities can be removed without warning. We don't consider these to be 'breaking changes.'
.browserSTRINGif (util.browser === 'Firefox') { /* OK to peer with Firefox peers. */ }
The current browser. This property can be useful in determining whether or not two peers can connect. For example, as of now data connections are not yet interoperable between major browsers. util.browser can currently have the values 'Firefox', 'Chrome', 'Unsupported', or 'Supported' (unknown WebRTC-compatible browser).
.supportsOBJECTif (util.supports.data) { /* OK to start a data connection. */ }
A hash of WebRTC features mapped to booleans that correspond to whether the feature is supported by the current browser.
Only the properties documented here are guaranteed to be present on util.supports.
.audioVideoBOOLEAN
True if the current browser supports media streams and PeerConnection.
.dataBOOLEAN
True if the current browser supports DataChannel and PeerConnection.
.binaryBOOLEAN
True if the current browser supports binary DataChannels.
.reliableBOOLEAN
True if the current browser supports reliable DataChannels.
